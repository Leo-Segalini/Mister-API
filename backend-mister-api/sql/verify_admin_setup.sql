-- =====================================================
-- SCRIPT DE V√âRIFICATION DE LA CONFIGURATION DES R√îLES
-- =====================================================
-- Ce script v√©rifie que tous les r√¥les, fonctions et politiques ont √©t√© cr√©√©s correctement

-- =====================================================
-- 1. V√âRIFICATION DES R√îLES
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE '=== V√âRIFICATION DES R√îLES ===';
    
    -- V√©rifier le r√¥le "user"
    IF EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'user') THEN
        RAISE NOTICE '‚úÖ R√¥le "user" existe';
    ELSE
        RAISE NOTICE '‚ùå R√¥le "user" manquant';
    END IF;
    
    -- V√©rifier le r√¥le "admin"
    IF EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'admin') THEN
        RAISE NOTICE '‚úÖ R√¥le "admin" existe';
    ELSE
        RAISE NOTICE '‚ùå R√¥le "admin" manquant';
    END IF;
END
$$;

-- Afficher les d√©tails des r√¥les
SELECT 
    rolname,
    rolsuper,
    rolinherit,
    rolcreaterole,
    rolcreatedb,
    rolcanlogin
FROM pg_roles 
WHERE rolname IN ('user', 'admin')
ORDER BY rolname;

-- =====================================================
-- 2. V√âRIFICATION DES FONCTIONS
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE '=== V√âRIFICATION DES FONCTIONS ===';
    
    -- V√©rifier is_admin
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'is_admin') THEN
        RAISE NOTICE '‚úÖ Fonction is_admin() existe';
    ELSE
        RAISE NOTICE '‚ùå Fonction is_admin() manquante';
    END IF;
    
    -- V√©rifier is_user
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'is_user') THEN
        RAISE NOTICE '‚úÖ Fonction is_user() existe';
    ELSE
        RAISE NOTICE '‚ùå Fonction is_user() manquante';
    END IF;
    
    -- V√©rifier get_user_role
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'get_user_role') THEN
        RAISE NOTICE '‚úÖ Fonction get_user_role() existe';
    ELSE
        RAISE NOTICE '‚ùå Fonction get_user_role() manquante';
    END IF;
    
    -- V√©rifier set_default_user_role
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'set_default_user_role') THEN
        RAISE NOTICE '‚úÖ Fonction set_default_user_role() existe';
    ELSE
        RAISE NOTICE '‚ùå Fonction set_default_user_role() manquante';
    END IF;
END
$$;

-- Afficher les d√©tails des fonctions
SELECT 
    proname as function_name,
    prosrc as function_source
FROM pg_proc 
WHERE proname IN ('is_admin', 'is_user', 'get_user_role', 'set_default_user_role')
ORDER BY proname;

-- =====================================================
-- 3. V√âRIFICATION DU TRIGGER
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE '=== V√âRIFICATION DU TRIGGER ===';
    
    -- V√©rifier le trigger
    IF EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'set_default_user_role_trigger') THEN
        RAISE NOTICE '‚úÖ Trigger set_default_user_role_trigger existe';
    ELSE
        RAISE NOTICE '‚ùå Trigger set_default_user_role_trigger manquant';
    END IF;
END
$$;

-- Afficher les d√©tails du trigger
SELECT 
    tgname as trigger_name,
    tgrelid::regclass as table_name,
    tgfoid::regproc as function_name,
    tgenabled as enabled
FROM pg_trigger 
WHERE tgname = 'set_default_user_role_trigger';

-- =====================================================
-- 4. V√âRIFICATION DES POLITIQUES RLS
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE '=== V√âRIFICATION DES POLITIQUES RLS ===';
    
    -- V√©rifier les politiques pour punchlines
    IF EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'punchlines') THEN
        RAISE NOTICE '‚úÖ Politiques RLS pour punchlines existent';
    ELSE
        RAISE NOTICE '‚ùå Politiques RLS pour punchlines manquantes';
    END IF;
    
    -- V√©rifier les politiques pour api_keys
    IF EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'api_keys') THEN
        RAISE NOTICE '‚úÖ Politiques RLS pour api_keys existent';
    ELSE
        RAISE NOTICE '‚ùå Politiques RLS pour api_keys manquantes';
    END IF;
    
    -- V√©rifier les politiques pour payments
    IF EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'payments') THEN
        RAISE NOTICE '‚úÖ Politiques RLS pour payments existent';
    ELSE
        RAISE NOTICE '‚ùå Politiques RLS pour payments manquantes';
    END IF;
END
$$;

-- Afficher toutes les politiques RLS
SELECT 
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    qual,
    with_check
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- =====================================================
-- 5. V√âRIFICATION DES UTILISATEURS
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE '=== V√âRIFICATION DES UTILISATEURS ===';
    
    -- Compter les utilisateurs avec r√¥le d√©fini
    DECLARE
        total_users INTEGER;
        users_with_role INTEGER;
        users_without_role INTEGER;
    BEGIN
        SELECT COUNT(*) INTO total_users FROM auth.users;
        SELECT COUNT(*) INTO users_with_role FROM auth.users WHERE raw_user_meta_data->>'role' IS NOT NULL;
        users_without_role := total_users - users_with_role;
        
        RAISE NOTICE 'üìä Total utilisateurs: %', total_users;
        RAISE NOTICE '‚úÖ Utilisateurs avec r√¥le: %', users_with_role;
        RAISE NOTICE '‚ùå Utilisateurs sans r√¥le: %', users_without_role;
        
        IF users_without_role = 0 THEN
            RAISE NOTICE 'üéâ Tous les utilisateurs ont un r√¥le d√©fini!';
        ELSE
            RAISE NOTICE '‚ö†Ô∏è  Certains utilisateurs n''ont pas de r√¥le d√©fini';
        END IF;
    END;
END
$$;

-- Afficher le r√©sum√© des utilisateurs et leurs r√¥les
SELECT 
    id,
    email,
    raw_user_meta_data->>'role' as role,
    created_at,
    CASE 
        WHEN raw_user_meta_data->>'role' IS NULL THEN '‚ùå Sans r√¥le'
        ELSE '‚úÖ R√¥le d√©fini'
    END as status
FROM auth.users 
ORDER BY created_at DESC;

-- =====================================================
-- 6. V√âRIFICATION DES PERMISSIONS
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE '=== V√âRIFICATION DES PERMISSIONS ===';
    
    -- V√©rifier les permissions du r√¥le "user"
    IF EXISTS (SELECT 1 FROM information_schema.table_privileges WHERE grantee = 'user') THEN
        RAISE NOTICE '‚úÖ Permissions du r√¥le "user" configur√©es';
    ELSE
        RAISE NOTICE '‚ùå Permissions du r√¥le "user" manquantes';
    END IF;
    
    -- V√©rifier les permissions du r√¥le "admin"
    IF EXISTS (SELECT 1 FROM information_schema.table_privileges WHERE grantee = 'admin') THEN
        RAISE NOTICE '‚úÖ Permissions du r√¥le "admin" configur√©es';
    ELSE
        RAISE NOTICE '‚ùå Permissions du r√¥le "admin" manquantes';
    END IF;
END
$$;

-- Afficher les permissions par r√¥le
SELECT 
    grantee,
    table_name,
    privilege_type
FROM information_schema.table_privileges 
WHERE grantee IN ('user', 'admin')
AND table_schema = 'public'
ORDER BY grantee, table_name, privilege_type;

-- =====================================================
-- 7. TESTS DE FONCTIONNEMENT
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE '=== TESTS DE FONCTIONNEMENT ===';
    
    -- Test de la fonction is_admin avec un utilisateur admin
    DECLARE
        admin_user_id UUID;
        is_admin_result BOOLEAN;
    BEGIN
        -- Trouver un utilisateur admin
        SELECT id INTO admin_user_id 
        FROM auth.users 
        WHERE raw_user_meta_data->>'role' = 'admin' 
        LIMIT 1;
        
        IF admin_user_id IS NOT NULL THEN
            SELECT is_admin(admin_user_id) INTO is_admin_result;
            IF is_admin_result THEN
                RAISE NOTICE '‚úÖ Test is_admin() r√©ussi pour un admin';
            ELSE
                RAISE NOTICE '‚ùå Test is_admin() √©chou√© pour un admin';
            END IF;
        ELSE
            RAISE NOTICE '‚ö†Ô∏è  Aucun utilisateur admin trouv√© pour le test';
        END IF;
    END;
    
    -- Test de la fonction is_user avec un utilisateur user
    DECLARE
        user_user_id UUID;
        is_user_result BOOLEAN;
    BEGIN
        -- Trouver un utilisateur user
        SELECT id INTO user_user_id 
        FROM auth.users 
        WHERE raw_user_meta_data->>'role' = 'user' 
        LIMIT 1;
        
        IF user_user_id IS NOT NULL THEN
            SELECT is_user(user_user_id) INTO is_user_result;
            IF is_user_result THEN
                RAISE NOTICE '‚úÖ Test is_user() r√©ussi pour un user';
            ELSE
                RAISE NOTICE '‚ùå Test is_user() √©chou√© pour un user';
            END IF;
        ELSE
            RAISE NOTICE '‚ö†Ô∏è  Aucun utilisateur user trouv√© pour le test';
        END IF;
    END;
END
$$;

-- =====================================================
-- 8. R√âSUM√â FINAL
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE '=== R√âSUM√â DE LA CONFIGURATION ===';
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ Configuration des r√¥les Supabase';
    RAISE NOTICE 'üìÖ Date de v√©rification: %', CURRENT_TIMESTAMP;
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ R√¥les cr√©√©s: user, admin';
    RAISE NOTICE '‚úÖ Fonctions cr√©√©es: is_admin, is_user, get_user_role, set_default_user_role';
    RAISE NOTICE '‚úÖ Trigger configur√©: set_default_user_role_trigger';
    RAISE NOTICE '‚úÖ Politiques RLS configur√©es pour toutes les tables';
    RAISE NOTICE '‚úÖ Permissions attribu√©es aux r√¥les';
    RAISE NOTICE '';
    RAISE NOTICE 'üöÄ Votre syst√®me de r√¥les est pr√™t √† √™tre utilis√©!';
    RAISE NOTICE '';
    RAISE NOTICE 'üìù Prochaines √©tapes:';
    RAISE NOTICE '   1. Tester la connexion admin dans votre application';
    RAISE NOTICE '   2. V√©rifier que les nouveaux utilisateurs re√ßoivent le r√¥le "user"';
    RAISE NOTICE '   3. Tester les politiques RLS avec diff√©rents r√¥les';
END
$$; 